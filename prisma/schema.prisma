// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  clerkId   String   @unique
  recipes   Recipe[] @relation("UserSavedRecipes")  
  authoredRecipes Recipe[] @relation("UserAuthoredRecipes") 
  goals     Goal[] @relation("UserGoals")
  profile   Profile?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}



model Recipe {
  id          String   @id @default(uuid())
  title       String
  ingredients String
  mealType    String
  cuisine     String
  cookingTime String
  complexity  String
  userId      String

  userSavedBy User @relation(fields: [userId], references: [id], name: "UserSavedRecipes", map: "Recipe_userSavedBy_fkey")
  userAuthor  User @relation(fields: [userId], references: [id], name: "UserAuthoredRecipes", map: "Recipe_userAuthor_fkey")

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


model Goal {
  id        String   @id @default(uuid())
  title     String
  target    Int
  unit      String
  category  Category
  userId    String
  user      User     @relation(fields: [userId], references: [id], name: "UserGoals", map: "Goal_userId_fkey")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  current   Int      @default(0)
}



enum Category {
  nutrition
  fitness
  health
}



  model Profile {
    id                 String   @id @default(uuid())
    userId             String   @unique
    name               String
    age                Int
    weight             Float
    height             Float
    gender             String
    allergies          String[]
    chronicDiseases    String[]
    dietaryPreferences String[]
    user               User     @relation(fields: [userId], references: [id])
  }
